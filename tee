// Rota para receber o formulário
app.post('/submit', (req, res) => {
    const { name, email } = req.body;

    // Inserir na primeira tabela
    const query1 = 'INSERT INTO tabela1 (nome) VALUES (?)';
    db.query(query1, [name], (err, result) => {
        if (err) {
            console.error('Erro ao inserir na tabela 1:', err);
            return res.status(500).send('Erro ao inserir na tabela 1');
        }

        // Inserir na segunda tabela
        const query2 = 'INSERT INTO tabela2 (email) VALUES (?)';
        db.query(query2, [email], (err, result) => {
            if (err) {
                console.error('Erro ao inserir na tabela 2:', err);
                return res.status(500).send('Erro ao inserir na tabela 2');
            }

            // Responder ao cliente
            res.send('Dados inseridos com sucesso!');
        });
    });
});

////
-- Criar o banco de dados
CREATE DATABASE sistema_acesso;

-- Usar o banco de dados criado
USE sistema_acesso;

-- Criar tabela de usuários
CREATE TABLE usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    senha VARCHAR(255) NOT NULL,
    tipo ENUM('adm', 'comum') NOT NULL
);

-- Inserir um usuário administrador
INSERT INTO usuarios (nome, email, senha, tipo) VALUES ('Admin', 'admin@example.com', 'senha_admin', 'adm');

-- Para fins de teste, insira um usuário comum
INSERT INTO usuarios (nome, email, senha, tipo) VALUES ('Usuario Comum', 'usuario@example.com', 'senha_usuario', 'comum');
//////////

// Rota de login
app.post('/login', (req, res) => {
    const { email, senha } = req.body;

    const query = 'SELECT * FROM usuarios WHERE email = ?';
    db.query(query, [email], (err, results) => {
        if (err) {
            return res.status(500).send('Erro no banco de dados');
        }
        if (results.length > 0) {
            const usuario = results[0];
            // Comparar senha com hash
            if (bcrypt.compareSync(senha, usuario.senha)) {
                // Gerar token JWT
                const token = jwt.sign({ id: usuario.id, tipo: usuario.tipo }, SECRET_KEY, { expiresIn: '1h' });
                return res.json({ token });
            }
        }
        res.status(401).send('E-mail ou senha incorretos');
    });
});

// Middleware para verificar o token JWT
function verificarToken(req, res, next) {
    const token = req.headers['authorization']?.split(' ')[1]; // Expectativa: "Bearer TOKEN"
    
    if (!token) {
        return res.status(403).send('Token não fornecido');
    }

    jwt.verify(token, SECRET_KEY, (err, decoded) => {
        if (err) {
            return res.status(401).send('Token inválido');
        }
        req.userId = decoded.id;
        req.userTipo = decoded.tipo; // Armazenar tipo de usuário
        next();
    });
}

// Middleware para verificar se o usuário é ADM
function verificarAdmin(req, res, next) {
    if (req.userTipo !== 'adm') {
        return res.status(403).send('Acesso negado: apenas para administradores');
    }
    next();
}

// Rotas
app.get('/home', verificarToken, (req, res) => {
    res.send('Tela Home');
});

app.get('/register', verificarToken, (req, res) => {
    res.send('Tela Register');
});

// Rota de inventário, acessível apenas para administradores
app.get('/inventory', verificarToken, verificarAdmin, (req, res) => {
    res.send('Tela Inventory');
});
//////////////////

let idComLetrasENumeros = "abc123"; // Exemplo de ID
let idComoString = String(idComLetrasENumeros); // Transforma em string

console.log(idComoString); // "abc123"

///////////////////////

function submitForm(event) {
    event.preventDefault(); // Impede o envio padrão do formulário
    
    // Simulação de envio de dados para o banco
    const formData = new FormData(event.target);
    
    // Aqui você faria a chamada para o seu backend (exemplo usando fetch)
    fetch('sua-url-para-enviar-os-dados', {
        method: 'POST',
        body: formData,
    })
    .then(response => {
        if (response.ok) {
            // Desabilitar a checkbox
            const checkbox = document.getElementById('myCheckbox');
            checkbox.disabled = true; // Desabilita a checkbox
            checkbox.checked = true;   // Mantém a checkbox marcada
            
            // Atualizar o status do formulário
            // Aqui você pode realizar a atualização do status, se necessário
            console.log('Status do formulário atualizado para "installed"');
            
            // Fechar o modal
            document.getElementById('myModal').style.display = 'none';
        } else {
            console.error('Erro ao enviar dados');
        }
    })
    .catch(error => console.error('Erro:', error));
}
